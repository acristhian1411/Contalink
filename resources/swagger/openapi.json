{
  "openapi": "3.0.0",
  "info": {
    "title": "Expenses API",
    "version": "1.0.0",
    "description": "An API for managing expenses",
    "contact":{
      "name":"API Support",
      "url":"http://www.example.com/support",
      "email":"N6wY7@example.com"
    }
  },
  "components":{
    "schemas": {
      "Persons": {
        "type": "object",
        "properties": {
          "person_fname": {
            "type": "string"
          },
          "person_lastname":{
            "type": "string"
          },
          "person_corpname":{
            "type": "string"
          },
          "person_idnumber":{
            "type": "string"
          },
          "person_address":{
            "type": "string"
          },
          "person_ruc":{
            "type": "string"
          },
          "person_birtdate":{
            "type": "string"
          },
          "person_photo":{
            "type": "string"
          },
          "p_type_id":{
            "type": "number"
          },
          "country_id":{
            "type": "number"
          },
          "city_id":{
            "type": "number"
          }
        }
      },
      "PersonTypes": {
        "type": "object",
        "properties": {
          "p_type_desc": {
            "type": "string"
          }
        }
      },
      "TillTypes": {
        "type": "object",
        "properties": {
          "till_type_desc": {
            "type": "string"
          }
        }
      },
      "Tills": {
        "type": "object",
        "properties": {
          "till_name": {
            "type": "string"
          },
          "till_account_number": {
            "type": "string"
          },
          "t_type_id": {
            "type": "number"
          },
          "till_status": {
            "type": "boolean"
          }
        }
      },
      "Categories": {
        "type": "object",
        "properties": {
          "cat_desc": {
            "type": "string"
          }
        }
      },
      "IvaTypes": {
        "type": "object",
        "properties": {
          "iva_type_desc": {
            "type": "string"
          },
          "iva_type_percent": {
            "type": "number"
          }
        }
      },
      "Products": {
        "type": "object",
        "properties": {
          "product_name": {
            "type": "string"
          },
          "product_desc": {
            "type": "string"
          },
          "product_cost_price": {
            "type": "number"
          },
          "product_quantity": {
            "type": "number"
          },
          "product_selling_price": {
            "type": "number"
          },
          "category_id": {
            "type": "number"
          },
          "iva_type_id": {
            "type": "number"
          }
        }
      },
      "Countries": {
        "type": "object",
        "properties": {
          "country_name": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          }
        }
      },
      "States": {
        "type": "object",
        "properties": {
          "country_id": {
            "type": "number"
          },
          "state_name": {
            "type": "string"
          }
        }
      },
      "Cities": {
        "type": "object",
        "properties": {
          "state_id": {
            "type": "number"
          },
          "city_name": {
            "type": "string"
          },
          "city_code": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags":[
    {
      "name": "PersonTypes",
      "description": "Manage PersonTypes"
    },
    {
      "name": "Persons",
      "description": "Manage Persons"
    },
    {
      "name": "TillTypes",
      "description": "Manage TillTypes"
    },
    {
      "name": "Tills",
      "description": "Manage Tills"
    },
    {
      "name": "Categories",
      "description": "Manage Categories"
    },
    {
      "name": "IvaTypes",
      "description": "Manage IvaTypes"
    },
    {
      "name": "Products",
      "description": "Manage Products"
    },
    {
      "name": "Countries",
      "description": "Manage countries"
    },
    {
      "name": "States",
      "description": "Manage States"
    },
    {
      "name": "Cities",
      "description": "Manage Cities"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local server"
    }
  ],
  "paths": {
    "/api/persons": {
      "get": {
        "summary": "Lists all the Persons",
        "tags": ["Persons"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Persons",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Persons"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new person",
        "tags": ["Persons"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Persons"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created person.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persons"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/personsbytype/{id}":{
      "get": {
        "summary": "Lists all the Persons filtered by p_type_id",
        "tags": ["Persons"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The persontype id"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Persons filtered by p_type_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Persons"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/persons/{id}": {
      "get": {
        "summary": "Get the person by id",
        "tags": ["Persons"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The person id"
          }
        ],
        "responses": {
          "200": {
            "description": "The person response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persons"
                }
              }
            }
          },
          "404": {
            "description": "The person was not found"
          }
        }
      },
      "put": {
        "summary": "Update the person by the id",
        "tags": ["Persons"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The person id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Persons"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The person was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persons"
                }
              }
            }
          },
          "404": {
            "description": "The person was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the person by id",
        "tags": ["Persons"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The person id"
          }
        ],
        "responses": {
          "200": {
            "description": "The person was deleted"
          },
          "404": {
            "description": "The person was not found"
          }
        }
      }
    },
    "/api/persontypes": {
      "get": {
        "summary": "Lists all the PersonTypes",
        "tags": ["PersonTypes"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the PersonTypes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonTypes"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new persontype",
        "tags": ["PersonTypes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonTypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created persontype.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonTypes"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/persontypes/{id}": {
      "get": {
        "summary": "Get the persontype by id",
        "tags": ["PersonTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The persontype id"
          }
        ],
        "responses": {
          "200": {
            "description": "The persontype response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonTypes"
                }
              }
            }
          },
          "404": {
            "description": "The persontype was not found"
          }
        }
      },
      "put": {
        "summary": "Update the persontype by the id",
        "tags": ["PersonTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The persontype id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonTypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The persontype was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonTypes"
                }
              }
            }
          },
          "404": {
            "description": "The persontype was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the persontype by id",
        "tags": ["PersonTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The persontype id"
          }
        ],
        "responses": {
          "200": {
            "description": "The persontype was deleted"
          },
          "404": {
            "description": "The persontype was not found"
          }
        }
      }
    },
    "/api/tilltypes": {
      "get": {
        "summary": "Lists all the TillTypes",
        "tags": ["TillTypes"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the TillTypes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TillTypes"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new tilltype",
        "tags": ["TillTypes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TillTypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created tilltype.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TillTypes"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/tilltypes/{id}": {
      "get": {
        "summary": "Get the tilltype by id",
        "tags": ["TillTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The tilltype id"
          }
        ],
        "responses": {
          "200": {
            "description": "The tilltype response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TillTypes"
                }
              }
            }
          },
          "404": {
            "description": "The tilltype was not found"
          }
        }
      },
      "put": {
        "summary": "Update the tilltype by the id",
        "tags": ["TillTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The tilltype id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TillTypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The tilltype was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TillTypes"
                }
              }
            }
          },
          "404": {
            "description": "The tilltype was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the tilltype by id",
        "tags": ["TillTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The tilltype id"
          }
        ],
        "responses": {
          "200": {
            "description": "The tilltype was deleted"
          },
          "404": {
            "description": "The tilltype was not found"
          }
        }
      }
    },
    "/api/tills": {
      "get": {
        "summary": "Lists all the Tills",
        "tags": ["Tills"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Tills",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tills"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new till",
        "tags": ["Tills"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tills"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created till.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tills"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/tills/{id}": {
      "get": {
        "summary": "Get the till by id",
        "tags": ["Tills"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The till id"
          }
        ],
        "responses": {
          "200": {
            "description": "The till response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tills"
                }
              }
            }
          },
          "404": {
            "description": "The till was not found"
          }
        }
      },
      "put": {
        "summary": "Update the till by the id",
        "tags": ["Tills"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The till id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tills"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The till was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tills"
                }
              }
            }
          },
          "404": {
            "description": "The till was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the till by id",
        "tags": ["Tills"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The till id"
          }
        ],
        "responses": {
          "200": {
            "description": "The till was deleted"
          },
          "404": {
            "description": "The till was not found"
          }
        }
      }
    },
    "/api/ivatypes": {
      "get": {
        "summary": "Lists all the IvaTypes",
        "tags": ["IvaTypes"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the IvaTypes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IvaTypes"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new ivatype",
        "tags": ["IvaTypes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IvaTypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created ivatype.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IvaTypes"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/ivatypes/{id}": {
      "get": {
        "summary": "Get the ivatype by id",
        "tags": ["IvaTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ivatype id"
          }
        ],
        "responses": {
          "200": {
            "description": "The ivatype response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IvaTypes"
                }
              }
            }
          },
          "404": {
            "description": "The ivatype was not found"
          }
        }
      },
      "put": {
        "summary": "Update the ivatype by the id",
        "tags": ["IvaTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ivatype id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IvaTypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ivatype was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IvaTypes"
                }
              }
            }
          },
          "404": {
            "description": "The ivatype was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the ivatype by id",
        "tags": ["IvaTypes"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ivatype id"
          }
        ],
        "responses": {
          "200": {
            "description": "The ivatype was deleted"
          },
          "404": {
            "description": "The ivatype was not found"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "summary": "Lists all the Categories",
        "tags": ["Categories"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Categories"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "tags": ["Categories"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Categories"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Categories"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "summary": "Get the category by id",
        "tags": ["Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category id"
          }
        ],
        "responses": {
          "200": {
            "description": "The category response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Categories"
                }
              }
            }
          },
          "404": {
            "description": "The category was not found"
          }
        }
      },
      "put": {
        "summary": "Update the category by the id",
        "tags": ["Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Categories"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The category was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Categories"
                }
              }
            }
          },
          "404": {
            "description": "The category was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the category by id",
        "tags": ["Categories"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category id"
          }
        ],
        "responses": {
          "200": {
            "description": "The category was deleted"
          },
          "404": {
            "description": "The category was not found"
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "summary": "Lists all the Products",
        "tags": ["Products"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Products"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "tags": ["Products"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Products"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Products"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "summary": "Get the category by id",
        "tags": ["Products"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category id"
          }
        ],
        "responses": {
          "200": {
            "description": "The category response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Products"
                }
              }
            }
          },
          "404": {
            "description": "The category was not found"
          }
        }
      },
      "put": {
        "summary": "Update the category by the id",
        "tags": ["Products"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Products"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The category was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Products"
                }
              }
            }
          },
          "404": {
            "description": "The category was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the category by id",
        "tags": ["Products"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category id"
          }
        ],
        "responses": {
          "200": {
            "description": "The category was deleted"
          },
          "404": {
            "description": "The category was not found"
          }
        }
      }
    },
    "/api/countries": {
      "get": {
        "summary": "Lists all the Countries",
        "tags": ["Countries"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Countries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Countries"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new country",
        "tags": ["Countries"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Countries"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created country.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/countries/{id}": {
      "get": {
        "summary": "Get the country by id",
        "tags": ["Countries"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The country id"
          }
        ],
        "responses": {
          "200": {
            "description": "The country response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries"
                }
              }
            }
          },
          "404": {
            "description": "The country was not found"
          }
        }
      },
      "put": {
        "summary": "Update the country by the id",
        "tags": ["Countries"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The country id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Countries"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The country was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries"
                }
              }
            }
          },
          "404": {
            "description": "The country was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the country by id",
        "tags": ["Countries"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The country id"
          }
        ],
        "responses": {
          "200": {
            "description": "The country was deleted"
          },
          "404": {
            "description": "The country was not found"
          }
        }
      }
    },
    "/api/states": {
      "get": {
        "summary": "Lists all the States",
        "tags": ["States"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the States",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/States"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new state",
        "tags": ["States"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/States"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created state.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/States"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/states/{id}": {
      "get": {
        "summary": "Get the information of a specific state by its id.",
        "tags": ["States"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The state id"
          }
        ],
        "responses": {
          "200": {
            "description": "The state response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/States"
                }
              }
            }
          },
          "404": {
            "description": "The state was not found"
          }
        }
      },
      "put": {
        "summary": "Update the state by the id",
        "tags": ["States"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The state id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/States"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The state was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/States"
                }
              }
            }
          },
          "404": {
            "description": "The state was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the state by id",
        "tags": ["States"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The state id"
          }
        ],
        "responses": {
          "200": {
            "description": "The state was deleted"
          },
          "404": {
            "description": "The state was not found"
          }
        }
      }
    },
    "/api/states_country/{id}":{
      "get": {
        "summary": "Lists all the States",
        "tags": ["States"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The state id"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the States filtered by country_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/States"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/cities": {
      "get": {
        "summary": "Lists all the Cities",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Cities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cities"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new city",
        "tags": ["Cities"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cities"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created city.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cities"
                }
              }
            }
          },
          "500": {
            "description": "Some server error"
          }
        }
      }
    },
    "/api/cities_state/{id}": {
      "get": {
        "summary": "Lists all the Cities filtered by State",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The state id"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Cities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cities"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/cities_country/{id}": {
      "get": {
        "summary": "Lists all the Cities filtered by country",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The country id"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "The quantity of results per page"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string"
            },
            "description": "The field by sort"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "The direction of the sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the Cities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cities"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/cities/{id}": {
      "get": {
        "summary": "Get the city by id",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The city id"
          }
        ],
        "responses": {
          "200": {
            "description": "The city response by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cities"
                }
              }
            }
          },
          "404": {
            "description": "The city was not found"
          }
        }
      },
      "put": {
        "summary": "Update the city by the id",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The city id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cities"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The city was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cities"
                }
              }
            }
          },
          "404": {
            "description": "The city was not found"
          },
          "500": {
            "description": "Some error happened"
          }
        }
      },
      "delete": {
        "summary": "Remove the city by id",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The city id"
          }
        ],
        "responses": {
          "200": {
            "description": "The city was deleted"
          },
          "404": {
            "description": "The city was not found"
          }
        }
      }
    }
}
}